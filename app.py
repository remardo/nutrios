import os
import io
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image
import google.generativeai as genai

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ API –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"
GEMINI_API_KEY = "–í–ê–®_GEMINI_API_–ö–õ–Æ–ß"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI
genai.configure(api_key=GEMINI_API_KEY)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–µ –º–æ–¥–µ–ª–∏: –æ–¥–Ω—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –¥—Ä—É–≥—É—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é)
text_model = genai.GenerativeModel('gemini-pro')
vision_model = genai.GenerativeModel('gemini-pro-vision')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
# –ö–ª—é—á: message_id —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –ó–Ω–∞—á–µ–Ω–∏–µ: chat_id
# –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
correction_data = {}


# --- –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –µ–¥—ã. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —É–≥–∞–¥–∞—Ç—å.\n\n"
        "–ï—Å–ª–∏ —è –æ—à–∏–±—É—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∏ —è –∏—Å–ø—Ä–∞–≤–ª—é—Å—å!"
    )

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    message = update.message
    chat_id = message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_file = await message.photo[-1].get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
    photo_bytes = await photo_file.download_as_bytearray()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PIL
    img = Image.open(io.BytesIO(photo_bytes))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∑–∞–≥–ª—É—à–∫—É" –æ —Ç–æ–º, —á—Ç–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
    processing_message = await message.reply_text("üß† –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º —Ñ–æ—Ç–æ...")

    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∫—É–ª–∏–Ω–∞—Ä. –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è –µ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini Vision
        response = vision_model.generate_content([prompt, img])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        sent_message = await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=processing_message.message_id,
            text=f"ü§ñ –î—É–º–∞—é, —ç—Ç–æ: **{response.text.strip()}**\n\n_–ï—Å–ª–∏ —è –Ω–µ–ø—Ä–∞–≤, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º._",
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        correction_data[sent_message.message_id] = chat_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=processing_message.message_id,
            text="üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)"""
    message = update.message
    user_text = message.text

    # --- –õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        replied_message_id = message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—à–∏–º –±–æ—Ç–æ–º –∏ –µ—Å—Ç—å –ª–∏ –æ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if message.reply_to_message.from_user.is_bot and replied_message_id in correction_data:
            await handle_correction(update, context)
            return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    # --- –õ–û–ì–ò–ö–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ï–î–´ –ü–û –¢–ï–ö–°–¢–£ ---
    processing_message = await message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...")
    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = f"–¢—ã ‚Äî –±–æ—Ç-–∫—É–ª–∏–Ω–∞—Ä. –û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç. –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_text}'"
        
        response = text_model.generate_content(prompt)
        
        sent_message = await context.bot.edit_message_text(
            chat_id=message.chat_id,
            message_id=processing_message.message_id,
            text=f"ü§ñ –ü–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å: **{response.text.strip()}**\n\n_–ï—Å–ª–∏ —è –Ω–µ–ø—Ä–∞–≤, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º._",
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        correction_data[sent_message.message_id] = message.chat_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await context.bot.edit_message_text(
            chat_id=message.chat_id,
            message_id=processing_message.message_id,
            text="üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_correction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    replied_message = update.message.reply_to_message
    correction_text = update.message.text
    
    chat_id = replied_message.chat_id
    message_id_to_edit = replied_message.message_id
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = f"‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:**\n\n`{correction_text.strip()}`"
        
        await context.bot.edit_message_text(
            text=new_text,
            chat_id=chat_id,
            message_id=message_id_to_edit,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if message_id_to_edit in correction_data:
            del correction_data[message_id_to_edit]
            
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! –Ø –∑–∞–ø–æ–º–Ω—é. üëç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()