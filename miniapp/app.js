// Nutrios MiniApp ‚Äì uses Telegram WebApp API and Admin API
(function(){
  const tg = window.Telegram?.WebApp;
  if (tg) tg.ready();

  const qs = new URLSearchParams(location.search);
  const debugUser = qs.get('tg');
  let clientId = null;

  async function fetchJSON(url, opts={}){
    const headers = Object.assign({}, opts.headers||{});
    if (tg?.initData) headers['X-Telegram-Init-Data'] = tg.initData;
    const res = await fetch(url, Object.assign({}, opts, { headers }));
    if (!res.ok) throw new Error(res.status+" "+res.statusText);
    return await res.json();
  }

  function notify(text){
    try{
      if (tg?.showAlert) tg.showAlert(text);
      else alert(text);
    }catch(e){ /* ignore */ }
  }

  function todayISO(){
    return new Date().toISOString().slice(0,10);
  }

  function userIdFromTG(){
    try{
      if (debugUser) return parseInt(debugUser,10);
      const u = tg?.initDataUnsafe?.user;
      return u?.id ? parseInt(u.id,10) : null;
    }catch(e){ return null }
  }

  function kpi(label, value, meta){
    return `<div class="kpi"><div class="label">${label}</div><div class="value">${value}</div>${meta?`<div class="meta">${meta}</div>`:''}</div>`;
  }

  function pct(v){ if (v==null) return '-'; return (v>=100?`<span class="ok">${v}%</span>`:(v>=80?`${v}%`:`<span class="warn">${v}%</span>`)); }

  async function resolveClient(){
    const uid = userIdFromTG();
    if (!uid) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω Telegram user id');
    // Prefer verified Telegram initData. If page opened with ?tg=... (local debug), server will validate only when enabled via env.
    const url = debugUser ? `/client/by_telegram/${uid}?tg=${uid}` : `/client/by_telegram/${uid}`;
    const row = await fetchJSON(url);
    clientId = row.id;
    return clientId;
  }

  async function loadTargets(){
    const t = await fetchJSON(`/clients/${clientId}/targets`);
    const el = document.getElementById('targets');
    el.innerHTML = [
      kpi('–ö–∞–ª–æ—Ä–∏–∏', `${t.kcal_target} –∫–∫–∞–ª`),
      kpi('–ë–µ–ª–∫–∏', `${t.protein_target_g} –≥`),
      kpi('–ñ–∏—Ä—ã', `${t.fat_target_g} –≥`),
      kpi('–£–≥–ª–µ–≤–æ–¥—ã', `${t.carbs_target_g} –≥`),
    ].join('');
    return t;
  }

  function pickToday(rows){
    const today = new Date().toISOString().slice(0,10);
    let chosen = rows.find(r => (r.period_start||'').startsWith(today));
    if (!chosen && rows.length) chosen = rows[rows.length-1];
    return chosen || null;
  }

  async function loadDaily(){
    const rows = await fetchJSON(`/clients/${clientId}/progress/daily`);
    const r = pickToday(rows);
    const el = document.getElementById('progressDaily');
    if (!r){ el.innerHTML = '<div class="muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è</div>'; return; }
    el.innerHTML = [
      kpi('–ö–∞–ª–æ—Ä–∏–∏', Math.round(r.kcal), pct(r.kcal_pct)),
      kpi('–ë–µ–ª–∫–∏', Math.round(r.protein_g)+' –≥', pct(r.protein_pct)),
      kpi('–ñ–∏—Ä—ã', Math.round(r.fat_g)+' –≥', pct(r.fat_pct)),
      kpi('–£–≥–ª–µ–≤–æ–¥—ã', Math.round(r.carbs_g)+' –≥', pct(r.carbs_pct)),
    ].join('');
    try { renderDailyChart(rows); } catch(e) {}
  }

  async function loadWeekly(){
    const rows = await fetchJSON(`/clients/${clientId}/progress/weekly`);
    const r = rows.length? rows[rows.length-1] : null;
    const el = document.getElementById('progressWeekly');
    if (!r){ el.innerHTML = '<div class="muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é</div>'; return; }
    el.innerHTML = [
      kpi('–ö–∞–ª–æ—Ä–∏–∏', Math.round(r.kcal), pct(r.kcal_pct)),
      kpi('–ë–µ–ª–∫–∏', Math.round(r.protein_g)+' –≥', pct(r.protein_pct)),
      kpi('–ñ–∏—Ä—ã', Math.round(r.fat_g)+' –≥', pct(r.fat_pct)),
      kpi('–£–≥–ª–µ–≤–æ–¥—ã', Math.round(r.carbs_g)+' –≥', pct(r.carbs_pct)),
    ].join('');
    try { renderWeeklyChart(rows); } catch(e) {}
  }

  async function loadStreak(){
    const s = await fetchJSON(`/clients/${clientId}/streak`);
    const el = document.getElementById('streak');
    el.innerHTML = `–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>${s.streak}</b> ${s.met_goal_7? 'üî• –¶–µ–ª—å 7 –¥–Ω–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!' : ''}`;
  }

  async function loadDailyMetrics(){
    const el = document.getElementById('dailyMetricsStatus');
    if (!el) return;
    try{
      const today = todayISO();
      const rows = await fetchJSON(`/clients/${clientId}/metrics/daily?start_date=${today}&end_date=${today}&limit=1`);
      if (!rows.length){
        el.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è';
        el.classList.add('muted');
        return;
      }
      const m = rows[0];
      const parts = [];
      parts.push(`–í–æ–¥–∞: ${m.water_goal_met ? '‚úÖ' : '‚Äî'}`);
      parts.push(`–®–∞–≥–∏: ${m.steps != null ? m.steps : '‚Äî'}`);
      parts.push(`–ë–µ–ª–æ–∫: ${m.protein_goal_met ? '‚úÖ' : '‚Äî'}`);
      parts.push(`–ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${m.fiber_goal_met ? '‚úÖ' : '‚Äî'}`);
      parts.push(`–ó–∞–≤—Ç—Ä–∞–∫ –¥–æ 10: ${m.breakfast_logged_before_10 ? '‚úÖ' : '‚Äî'}`);
      parts.push(`–£–∂–∏–Ω: ${m.dinner_logged ? '‚úÖ' : '‚Äî'}`);
      parts.push(`–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: ${m.new_recipe_logged ? '‚úÖ' : '‚Äî'}`);
      el.textContent = parts.join(' ¬∑ ');
      el.classList.remove('muted');
    }catch(e){
      el.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏';
      el.classList.add('muted');
    }
  }

  function formatEvent(row){
    const dt = row.occurred_at || row.created_at;
    let when = '';
    try{
      const d = new Date(dt);
      when = d.toLocaleString('ru-RU', { hour: '2-digit', minute:'2-digit', day:'2-digit', month:'2-digit' });
    }catch(e){ when = dt || ''; }
    let payload = '';
    if (row.payload && Object.keys(row.payload).length){
      payload = Object.entries(row.payload).map(([k,v]) => `${k}: ${v}`).join(', ');
    }
    return `<div class="event-item"><b>${row.type}</b> ¬∑ ${when}${payload?`<div class="muted">${payload}</div>`:''}</div>`;
  }

  async function loadEvents(){
    const el = document.getElementById('eventsList');
    if (!el) return;
    try{
      const rows = await fetchJSON(`/clients/${clientId}/events?limit=5`);
      if (!rows.length){
        el.textContent = '–°–æ–±—ã—Ç–∏—è –µ—â—ë –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å';
        el.classList.add('muted');
        return;
      }
      el.classList.remove('muted');
      el.innerHTML = rows.map(formatEvent).join('');
    }catch(e){
      el.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è';
      el.classList.add('muted');
    }
  }

  async function upsertDailyMetric(fields){
    const body = Object.assign({ date: todayISO() }, fields);
    await fetchJSON(`/clients/${clientId}/metrics/daily`, { method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  }

  async function postEvent(type, payload={}, extras={}){
    const body = Object.assign({ type }, extras);
    if (payload && Object.keys(payload).length) body.payload = payload;
    await fetchJSON(`/clients/${clientId}/events`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  }

  async function submitQuiz(ev){
    ev.preventDefault();
    const form = ev.target;
    const data = Object.fromEntries(new FormData(form).entries());
    // convert numbers
    ['age','height_cm','weight_kg'].forEach(k=>{ if (data[k] !== undefined && data[k] !== '') data[k] = Number(data[k]); });
    await fetchJSON(`/clients/${clientId}/questionnaire`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(data) });
    await loadTargets();
    await loadDaily();
    await loadWeekly();
  }

  async function editTargets(){
    const kcal = Number(prompt('–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª):','2000'));
    const p = Number(prompt('–ë–µ–ª–∫–∏ (–≥):','100'));
    const f = Number(prompt('–ñ–∏—Ä—ã (–≥):','70'));
    const c = Number(prompt('–£–≥–ª–µ–≤–æ–¥—ã (–≥):','250'));
    if (!kcal || !p || !f || !c) return;
    await fetchJSON(`/clients/${clientId}/targets`, { method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify({kcal_target:kcal,protein_target_g:p,fat_target_g:f,carbs_target_g:c}) });
    await loadTargets(); await loadDaily(); await loadWeekly();
  }

  async function boot(){
    try{
      await resolveClient();
      await loadTargets();
      await loadDaily();
      await loadWeekly();
      await loadDailyMetrics();
      await loadStreak();
      await loadEvents();
      await loadTips();
    }catch(e){
      alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: '+e.message);
    }
  }

  document.getElementById('quiz').addEventListener('submit', submitQuiz);
  document.getElementById('refresh').addEventListener('click', boot);
  document.getElementById('editTargets').addEventListener('click', editTargets);
  document.getElementById('markWater').addEventListener('click', async ev => {
    ev.preventDefault();
    try{
      await upsertDailyMetric({ water_goal_met: true });
      await loadDailyMetrics();
      notify('–û—Ç–º–µ—Ç–∫–∞ –ø–æ –≤–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('markDinner').addEventListener('click', async ev => {
    ev.preventDefault();
    try{
      await upsertDailyMetric({ dinner_logged: true });
      await loadDailyMetrics();
      notify('–£–∂–∏–Ω –æ—Ç–º–µ—á–µ–Ω');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('markNewRecipe').addEventListener('click', async ev => {
    ev.preventDefault();
    try{
      await upsertDailyMetric({ new_recipe_logged: true });
      await loadDailyMetrics();
      notify('–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('stepsForm').addEventListener('submit', async ev => {
    ev.preventDefault();
    const input = document.getElementById('stepsInput');
    const value = Number(input.value || '');
    if (!value || value < 0){ notify('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤'); return; }
    try{
      await upsertDailyMetric({ steps: value });
      input.value = '';
      await loadDailyMetrics();
      notify(`–®–∞–≥–∏ (${value}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('btnChallenge').addEventListener('click', async ev => {
    ev.preventDefault();
    const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞?');
    if (title === null) return;
    if (!title.trim()){ notify('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞'); return; }
    try{
      await postEvent('challenge_completed', { title: title.trim() });
      await loadEvents();
      notify('–û—Ç–ª–∏—á–Ω–æ! –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('btnShareProgress').addEventListener('click', async ev => {
    ev.preventDefault();
    const note = prompt('–ß–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?');
    if (note === null) return;
    if (!note.trim()){ notify('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'); return; }
    try{
      await postEvent('shared_progress', { note: note.trim() });
      await loadEvents();
      notify('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü–æ–¥–µ–ª–∏–ª–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  document.getElementById('btnStreakResumed').addEventListener('click', async ev => {
    ev.preventDefault();
    try{
      await postEvent('streak_resumed', {});
      await loadEvents();
      notify('–°–µ—Ä–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è');
    }catch(e){ notify('–û—à–∏–±–∫–∞: '+e.message); }
  });
  boot();

  function renderDailyChart(rows){
    const el = document.getElementById('chartDaily'); if (!el) return;
    const labels = rows.map(r => (r.period_start||'').slice(0,10));
    const data = {
      labels,
      datasets: [
        { label:'–ö–∫–∞–ª', data: rows.map(r=>r.kcal), borderColor:'#f59e0b', backgroundColor:'rgba(245,158,11,0.2)' },
        { label:'–ë–µ–ª–∫–∏', data: rows.map(r=>r.protein_g), borderColor:'#3b82f6', backgroundColor:'rgba(59,130,246,0.2)' },
        { label:'–ñ–∏—Ä—ã', data: rows.map(r=>r.fat_g), borderColor:'#10b981', backgroundColor:'rgba(16,185,129,0.2)' },
        { label:'–£–≥–ª–µ–≤–æ–¥—ã', data: rows.map(r=>r.carbs_g), borderColor:'#8b5cf6', backgroundColor:'rgba(139,92,246,0.2)' },
      ]
    };
    new Chart(el.getContext('2d'), { type:'line', data, options:{ responsive: true, plugins:{ legend:{ labels:{ color:'#e6e8ee' } } }, scales:{ x:{ ticks:{ color:'#9aa3b2' } }, y:{ ticks:{ color:'#9aa3b2' } } } } });
  }

  function renderWeeklyChart(rows){
    const el = document.getElementById('chartWeekly'); if (!el) return;
    const labels = rows.map(r => (r.period_start||'').slice(0,10));
    const data = {
      labels,
      datasets: [
        { label:'–ö–∫–∞–ª', data: rows.map(r=>r.kcal), borderColor:'#f59e0b', backgroundColor:'rgba(245,158,11,0.2)' },
        { label:'–ë–µ–ª–∫–∏', data: rows.map(r=>r.protein_g), borderColor:'#3b82f6', backgroundColor:'rgba(59,130,246,0.2)' },
        { label:'–ñ–∏—Ä—ã', data: rows.map(r=>r.fat_g), borderColor:'#10b981', backgroundColor:'rgba(16,185,129,0.2)' },
        { label:'–£–≥–ª–µ–≤–æ–¥—ã', data: rows.map(r=>r.carbs_g), borderColor:'#8b5cf6', backgroundColor:'rgba(139,92,246,0.2)' },
      ]
    };
    new Chart(el.getContext('2d'), { type:'line', data, options:{ responsive: true, plugins:{ legend:{ labels:{ color:'#e6e8ee' } } }, scales:{ x:{ ticks:{ color:'#9aa3b2' } }, y:{ ticks:{ color:'#9aa3b2' } } } } });
  }

  async function loadTips(){
    try{
      const res = await fetchJSON(`/clients/${clientId}/tips/today`);
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = '<div class="section-title">–ü–æ–¥—Å–∫–∞–∑–∫–∏</div><ul>'+ (res.tips||[]).map(t=>`<li>${t}</li>`).join('') +'</ul>';
      document.querySelector('main').appendChild(div);
    }catch(e){ /* ignore */ }
  }
})();
