# bot/main.py
# Simple Telegram food recognition bot with formatted RU output + Admin API ingestion
# Added features:
#   /menu ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏:
#       üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
#       ‚ÑπÔ∏è –û –±–æ—Ç–µ ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
#       üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
#       üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é ‚Äî —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)
#   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Admin API (/clients, /summary/daily, /summary/weekly)
# Requirements:
#   python-telegram-bot==21.9
#   openai>=1.40.0
#   python-dotenv>=1.0.1
#
# .env (root or bot/):
#   TELEGRAM_BOT_TOKEN=...
#   OPENAI_API_KEY=...
#   OPENAI_VISION_MODEL=gpt-5
#   OPENAI_TEXT_MODEL=gpt-5
#   ADMIN_API_BASE=http://localhost:8000
#   ADMIN_API_KEY=supersecret

import os, json, base64, sqlite3, logging
from datetime import datetime, timezone, date, timedelta
from typing import Optional

from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
)
import httpx

# --- Local modules for Admin integration ---
from parse_block import parse_formatted_block          # bot/parse_block.py
from ingest_client import ingest_meal                  # bot/ingest_client.py

# ------------- ENV / CONFIG -------------
# Try loading from repo root and bot/ folder
if os.path.exists(os.path.join(os.path.dirname(__file__), "..", ".env")):
    load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env"))
else:
    load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
MODEL_VISION = os.getenv("OPENAI_VISION_MODEL", "gpt-5")
MODEL_TEXT   = os.getenv("OPENAI_TEXT_MODEL",   "gpt-5")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise SystemExit("Set TELEGRAM_BOT_TOKEN and OPENAI_API_KEY in .env")

# ------------- LOGGING -------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("foodbot")

# ------------- OPENAI -------------
client = OpenAI(api_key=OPENAI_KEY)

# ------------- DB (SQLite) -------------
DB_PATH = os.path.join(os.path.dirname(__file__), "state_simple.db")

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS interactions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER, original_message_id INTEGER, bot_message_id INTEGER,
        mode TEXT,                     -- 'image' or 'text'
        original_hint TEXT,            -- caption or text
        bot_output TEXT,               -- last rendered formatted text
        created_at TEXT, updated_at TEXT
    )""")
    conn.commit(); conn.close()

def save_interaction(chat_id, original_message_id, bot_message_id, mode, hint, bot_output):
    ts = datetime.now(timezone.utc).isoformat()
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""INSERT INTO interactions(chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output, created_at, updated_at)
                 VALUES(?,?,?,?,?,?,?,?)""",
              (chat_id, original_message_id, bot_message_id, mode, hint, bot_output, ts, ts))
    conn.commit(); conn.close()

def update_interaction_bot_output(bot_message_id, new_text):
    ts = datetime.now(timezone.utc).isoformat()
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""UPDATE interactions SET bot_output=?, updated_at=? WHERE bot_message_id=?""",
              (new_text, ts, bot_message_id))
    conn.commit(); conn.close()

def get_interaction_by_bot_message_id(bot_message_id):
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""SELECT id, chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output
                 FROM interactions WHERE bot_message_id=?""", (bot_message_id,))
    row = c.fetchone(); conn.close(); return row

def get_last_interaction_by_chat(chat_id):
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""SELECT id, chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output
                 FROM interactions WHERE chat_id=? ORDER BY id DESC LIMIT 1""", (chat_id,))
    row = c.fetchone(); conn.close(); return row

# ------------- PROMPTS -------------
FORMAT_INSTRUCTIONS_RU = """
–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º —á–∏—Ç–∞–µ–º—ã–º –±–ª–æ–∫–æ–º (–±–µ–∑ –∫–æ–¥–∞, –±–µ–∑ JSON):

üçΩÔ∏è –†–∞–∑–±–æ—Ä –±–ª—é–¥–∞ (–æ—Ü–µ–Ω–∫–∞ –ø–æ {SOURCE})
{TITLE}.
–ü–æ—Ä—Ü–∏—è: ~ {PORTION} –≥  ¬∑  –¥–æ–≤–µ—Ä–∏–µ {CONF}%
–ö–∞–ª–æ—Ä–∏–∏: {KCAL} –∫–∫–∞–ª
–ë–ñ–£: –±–µ–ª–∫–∏ {P} –≥ ¬∑ –∂–∏—Ä—ã {F} –≥ ¬∑ —É–≥–ª–µ–≤–æ–¥—ã {C} –≥
–ñ–∏—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ: –≤—Å–µ–≥–æ {F_TOTAL} –≥; –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ {F_SAT} –≥; –º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ {F_MONO} –≥; –ø–æ–ª–∏–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ {F_POLY} –≥; —Ç—Ä–∞–Ω—Å {F_TRANS} –≥
–û–º–µ–≥–∞: –æ–º–µ–≥–∞-6 {OMEGA6} –≥; –æ–º–µ–≥–∞-3 {OMEGA3} –≥ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {OMEGA_RATIO})
–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –≤—Å–µ–≥–æ {FIBER_TOTAL} –≥ (—Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞—è {FIBER_SOL} –≥, –Ω–µ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞—è {FIBER_INSOL} –≥)
–û–≤–æ—â–∏: {VEGETABLES} –≥
–°–ª–∞–¥–∫–æ–µ: {SWEET_FLAG}
–í–æ–¥–∞/–Ω–∞–ø–∏—Ç–∫–∏: {WATER_ML} –º–ª
–ö–ª—é—á–µ–≤—ã–µ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–æ–ø-5):
‚Ä¢ {MICRO1}
‚Ä¢ {MICRO2}
–§–ª–∞–≥–∏ –¥–∏–µ—Ç—ã:
‚Ä¢ vegetarian: {VEGETARIAN}  ¬∑  vegan: {VEGAN}
‚Ä¢ glutenfree: {GLUTENFREE}  ¬∑  lactosefree: {LACTOSEFREE}
–î–æ–ø—É—â–µ–Ω–∏—è:
‚Ä¢ {ASSUMP1}
‚Ä¢ {ASSUMP2}

–ü—Ä–∞–≤–∏–ª–∞:
- –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω—ã–π –º–∞–∫–µ—Ç –∏ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫.
- –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–∞–ª–æ—Ä–∏–∏: 360 –∫–∫–∞–ª¬ª).
- –°—Ç—Ä–æ–∫–∞ ¬´–°–ª–∞–¥–∫–æ–µ¬ª –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª (–Ω–∞–ª–∏—á–∏–µ –¥–µ—Å–µ—Ä—Ç–æ–≤/—Å–ª–∞–¥–æ—Å—Ç–µ–π).
- –ï—Å–ª–∏ –Ω–µ—Ç –æ–≤–æ—â–µ–π –∏–ª–∏ –≤–æ–¥—ã, —Å—Ç–∞–≤—å ¬´0 –≥¬ª / ¬´0 –º–ª¬ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ {TITLE} ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ñ–∞—Ä–µ–Ω—ã–π –ª–æ—Å–æ—Å—å —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ —Å–∞–ª–∞—Ç–æ–º¬ª).
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –≤–Ω–µ –±–ª–æ–∫–∞.
"""

SYSTEM_SIMPLE = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ü–†–û–°–¢–û —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –µ–¥—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –≤—ã–¥–∞—ë—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n"
    "–ù–µ –≤–¥–∞–≤–∞–π—Å—è –≤ —Å–ª–æ–∂–Ω—ã–µ –Ω—É—Ç—Ä–∏-—Ä–∞—Å—á—ë—Ç—ã: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.\n"
    "–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∏–∫–∞–∫–∏—Ö JSON –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
)

REVISE_RULES = (
    "–ù–∏–∂–µ —Ç–≤–æ–π –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ/–ø–æ–ø—Ä–∞–≤–∫—É.\n"
    "–ü–µ—Ä–µ–ø–∏—à–∏ –±–ª–æ–∫, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–≤ –¢–û–õ–¨–ö–û –æ—à–∏–±–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–∞–≤, –ø–æ—Ä—Ü–∏—é, —Ñ–ª–∞–≥–∏, –ë–ñ–£, –∂–∏—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ, –æ–º–µ–≥–∞, –∫–ª–µ—Ç—á–∞—Ç–∫–∞), –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤—å –∫–∞–∫ –±—ã–ª–æ.\n"
    "–§–æ—Ä–º–∞—Ç –∏ –º–∞–∫–µ—Ç –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º–∏ –∂–µ. –í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π."
)

# ------------- UTILS -------------
def encode_image_to_data_url(path: str) -> str:
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    return f"data:image/jpeg;base64,{b64}"

async def llm_render_from_image(image_data_url: str, hint_text: str = "") -> str:
    user_parts = [
        {"type": "text", "text": SYSTEM_SIMPLE + "\n\n" + FORMAT_INSTRUCTIONS_RU.replace("{SOURCE}", "—Ñ–æ—Ç–æ")}
    ]
    user_parts.append({"type": "image_url", "image_url": {"url": image_data_url}})
    if hint_text:
        user_parts.append({"type": "text", "text": f"–ü–æ–¥–ø–∏—Å—å/–ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hint_text}"})
    resp = client.chat.completions.create(
        model=MODEL_VISION,
        messages=[{"role":"user","content": user_parts}]
    )
    content = resp.choices[0].message.content.strip()
    content = await ensure_fat_fiber_sections(content)
    return content

async def llm_render_from_text(text: str) -> str:
    prompt = SYSTEM_SIMPLE + "\n\n" + FORMAT_INSTRUCTIONS_RU.replace("{SOURCE}", "–æ–ø–∏—Å–∞–Ω–∏—é") + "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + text
    resp = client.chat_completions.create(  # fallback for SDK variations
        model=MODEL_TEXT,
        messages=[{"role":"user","content": prompt}]
    ) if hasattr(client, "chat_completions") else client.chat.completions.create(
        model=MODEL_TEXT,
        messages=[{"role":"user","content": prompt}]
    )
    # normalize SDK difference
    content = (resp.choices[0].message.content if hasattr(resp.choices[0], "message") else resp.choices[0].content).strip()
    content = await ensure_fat_fiber_sections(content)
    return content

async def llm_revise(previous_block: str, correction_text: str) -> str:
    resp = client.chat.completions.create(
        model=MODEL_TEXT,
        messages=[
            {"role":"system","content": REVISE_RULES},
            {"role":"user","content": "–¢–≤–æ–π –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç:\n" + previous_block},
            {"role":"user","content": "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + correction_text}
        ]
    )
    return resp.choices[0].message.content.strip()

def _send_ingest_from_block(
    block_text: str,
    update: Update,
    message_id: int,
    source_type: str,
    image_path: Optional[str] = None
) -> None:
    """Parse bot block and send to Admin API (upsert by message_id)."""
    try:
        parsed = parse_formatted_block(block_text)
        ingest_meal({
            "telegram_user_id": update.message.from_user.id,
            "telegram_username": update.message.from_user.username,
            "captured_at_iso": datetime.now(timezone.utc).isoformat(),
            "title": parsed["title"],
            "portion_g": parsed["portion_g"],
            "confidence": parsed["confidence"],
            "kcal": parsed["kcal"],
            "protein_g": parsed.get("protein_g"),
            "fat_g": parsed.get("fat_g"),
            "carbs_g": parsed.get("carbs_g"),
            "flags": parsed.get("flags", {}),
            "micronutrients": parsed.get("micronutrients", []),
            "assumptions": parsed.get("assumptions", []),
            "extras": parsed.get("extras", {}),
            "source_type": source_type,
            "image_path": image_path,
            "message_id": message_id
        })
    except Exception as e:
        log.exception("Failed to ingest meal", exc_info=e)

# Ensure sections for detailed fats, omega, fiber are present; if missing, ask LLM to revise-insert them.
async def ensure_fat_fiber_sections(block: str) -> str:
    needs_fats = ("–ñ–∏—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ:" not in block)
    needs_omega = ("–û–º–µ–≥–∞:" not in block)
    needs_fiber = ("–ö–ª–µ—Ç—á–∞—Ç–∫–∞:" not in block)
    needs_vegetables = ("–û–≤–æ—â–∏:" not in block)
    needs_sweets = ("–°–ª–∞–¥–∫–æ–µ:" not in block)
    needs_water = ("–í–æ–¥–∞/–Ω–∞–ø–∏—Ç–∫–∏:" not in block)
    if not (needs_fats or needs_omega or needs_fiber or needs_vegetables or needs_sweets or needs_water):
        return block
    try:
        missing_list = ", ".join([
            s
            for s, cond in [
                ("–∂–∏—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ", needs_fats),
                ("–æ–º–µ–≥–∞", needs_omega),
                ("–∫–ª–µ—Ç—á–∞—Ç–∫–∞", needs_fiber),
                ("–æ–≤–æ—â–∏", needs_vegetables),
                ("—Å–ª–∞–¥–∫–æ–µ", needs_sweets),
                ("–≤–æ–¥–∞", needs_water),
            ]
            if cond
        ])
        revise_system = (
            "–¢—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í—Å—Ç–∞–≤—å –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –±–ª–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è '–ñ–∏—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ', '–û–º–µ–≥–∞', '–ö–ª–µ—Ç—á–∞—Ç–∫–∞', '–û–≤–æ—â–∏', '–°–ª–∞–¥–∫–æ–µ' –∏ '–í–æ–¥–∞/–Ω–∞–ø–∏—Ç–∫–∏' –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º. "
            "–°–æ—Ö—Ä–∞–Ω–∏ –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏ –µ–¥–∏–Ω–∏—Ü—ã (–≥/–º–ª). "
            "–°—Ç—Ä–æ–≥–æ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–ª–æ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
        )
        user_req = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_list}. –î–æ–±–∞–≤—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–æ–≤–Ω–æ –≤ —Ç–µ –º–µ—Å—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å–ª–µ –ë–ñ–£."
        resp = client.chat.completions.create(
            model=MODEL_TEXT,
            messages=[
                {"role":"system","content": revise_system},
                {"role":"user","content": "–¢–µ–∫—É—â–∏–π –±–ª–æ–∫:\n" + block},
                {"role":"user","content": user_req},
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return block

# ------------- HANDLERS -------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—à–∏ –±–ª—é–¥–æ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –≤–µ—Ä–Ω—É –æ—Ç—á—ë—Ç.\n"
        "–£—Ç–æ—á–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ä–µ–ø–ª–∞–µ–º –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (¬´–µ—Å—Ç—å ‚Ä¶¬ª, ¬´–¥–æ–±–∞–≤—å ‚Ä¶¬ª, ¬´–±–µ–∑ ‚Ä¶¬ª)."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.info("handle_photo: received update has_photo=%s", bool(update.message and update.message.photo))
    if not update.message or not update.message.photo:
        return
    photo = update.message.photo[-1]
    f = await photo.get_file()
    downloads_dir = os.path.join(os.path.dirname(__file__), "downloads")
    os.makedirs(downloads_dir, exist_ok=True)
    local_path = os.path.join(downloads_dir, f"{f.file_unique_id}.jpg")
    await f.download_to_drive(local_path)
    caption = (update.message.caption or "").strip()

    try:
        block = await llm_render_from_image(encode_image_to_data_url(local_path), caption)
    except Exception as e:
        log.exception("LLM image render failed", exc_info=e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    sent = await update.message.reply_text(block)

    # --- Admin ingestion ---
    _send_ingest_from_block(
        block_text=block,
        update=update,
        message_id=sent.message_id,
        source_type="image",
        image_path=local_path
    )

    # --- Local persistence for correction flow ---
    save_interaction(update.effective_chat.id, update.message.message_id, sent.message_id, "image", caption, block)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.info("handle_text: has_text=%s is_reply=%s", bool(update.message and update.message.text), bool(update.message and update.message.reply_to_message))
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    # Not a reply but likely a correction ‚Üí apply to last bot message
    if not (update.message.reply_to_message and update.message.reply_to_message.from_user and update.message.reply_to_message.from_user.is_bot):
        markers = ("–µ—Å—Ç—å ", "–¥–æ–±–∞–≤—å", "—É–±–µ—Ä–∏", "–±–µ–∑ ", "+", "–µ—â—ë ", "–µ—â–µ ", "–ø–æ–º–µ–Ω—è–π", "–∑–∞–º–µ–Ω–∏")
        lc = text.lower()
        if any(lc.startswith(m) or m in lc for m in markers):
            last = get_last_interaction_by_chat(update.effective_chat.id)
            if last:
                _, chat_id, orig_id, bot_msg_id, mode, hint, prev_block = last
                try:
                    new_block = await llm_revise(prev_block, text)
                except Exception as e:
                    log.exception("LLM revise failed", exc_info=e)
                    new_block = prev_block  # fallback: keep as is

                try:
                    await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=bot_msg_id, text=new_block)
                except Exception:
                    await update.message.reply_text(new_block)

                update_interaction_bot_output(bot_msg_id, new_block)

                # Admin ingestion (update same message_id)
                dummy_update = update  # for user id/username
                _send_ingest_from_block(
                    block_text=new_block,
                    update=dummy_update,
                    message_id=bot_msg_id,
                    source_type=mode or "text",
                    image_path=None
                )
                return

    # Fresh text identification
    try:
        block = await llm_render_from_text(text)
    except Exception as e:
        log.exception("LLM text render failed", exc_info=e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
        return
    sent = await update.message.reply_text(block)

    # Admin ingestion
    _send_ingest_from_block(
        block_text=block,
        update=update,
        message_id=sent.message_id,
        source_type="text",
        image_path=None
    )

    save_interaction(update.effective_chat.id, update.message.message_id, sent.message_id, "text", text, block)

async def handle_correction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reply-to-bot ‚Üí correction
    msg = update.message
    if not msg or not msg.text or not msg.reply_to_message:
        return
    if not (msg.reply_to_message.from_user and msg.reply_to_message.from_user.is_bot and msg.reply_to_message.from_user.id == context.bot.id):
        return

    row = get_interaction_by_bot_message_id(msg.reply_to_message.message_id)
    if not row: return
    _, chat_id, orig_id, bot_msg_id, mode, hint, prev_block = row

    try:
        new_block = await llm_revise(prev_block, msg.text.strip())
    except Exception as e:
        log.exception("LLM revise failed", exc_info=e)
        new_block = prev_block

    try:
        await msg.reply_to_message.edit_text(new_block)
    except Exception:
        await msg.reply_text(new_block)

    update_interaction_bot_output(bot_msg_id, new_block)

    # Admin ingestion (update same message_id)
    _send_ingest_from_block(
        block_text=new_block,
        update=update,
        message_id=bot_msg_id,
        source_type=mode or "text",
        image_path=None
    )

async def finalize_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏. –ö–æ–º–∞–Ω–¥–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è üòä")

# ------------- MENU / STATS -------------
MENU_CB_HELP = "MENU_HELP"
MENU_CB_ABOUT = "MENU_ABOUT"
MENU_CB_DAILY = "MENU_DAILY"
MENU_CB_WEEKLY = "MENU_WEEKLY"
MENU_CB_DAILY_DETAILS = "MENU_DAILY_DETAILS"

def menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=MENU_CB_HELP),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data=MENU_CB_ABOUT)
        ],
        [
            InlineKeyboardButton("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=MENU_CB_DAILY),
            InlineKeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data=MENU_CB_WEEKLY)
        ],
        [
            InlineKeyboardButton("üßæ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ", callback_data=MENU_CB_DAILY_DETAILS)
        ]
    ])

INSTRUCTION_TEXT = (
    "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
    "1. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Ä–∞–∑–±–æ—Ä —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –ë–ñ–£.\n"
    "2. –ú–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º.\n"
    "3. –£—Ç–æ—á–Ω–µ–Ω–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ ‚Äò–¥–æ–±–∞–≤—å‚Äô, ‚Äò—É–±–µ—Ä–∏‚Äô, ‚Äò–±–µ–∑‚Äô, ‚Äò–µ—â—ë/–µ—â–µ‚Äô, ‚Äò–ø–æ–º–µ–Ω—è–π‚Äô, –∏–ª–∏ –æ—Ç–≤–µ—Ç —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –º–æ–π –±–ª–æ–∫.\n"
    "4. /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.\n"
    "5. –°–≤–æ–¥–∫–∏: –∫–Ω–æ–ø–∫–∏ ‚Äò–ó–∞ —Å–µ–≥–æ–¥–Ω—è‚Äô, ‚Äò–ó–∞ –Ω–µ–¥–µ–ª—é‚Äô –∏ ‚Äò–ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ‚Äô."
)

ABOUT_TEXT = (
    "‚ÑπÔ∏è –û –±–æ—Ç–µ\n"
    "Nutrios ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –±–ª—é–¥–∞ –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –¥–∞—ë—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–ª–æ—Ä–∏–π, –ë–ñ–£ –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤."
)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.info("/menu invoked chat_id=%s", update.effective_chat.id if update.effective_chat else None)
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu_command(update, context)

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await _build_daily_text(update.effective_user.id)
    await update.message.reply_text(text)

async def week_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await _build_weekly_text(update.effective_user.id)
    await update.message.reply_text(text)

async def challenge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client_id = await _fetch_client_id(user_id)
    if not client_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    active = await _fetch_active_challenges(client_id)
    available = await _fetch_available_challenges(client_id)
    lines: list[str] = []
    if active:
        lines.append("üî• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:")
        for row in active:
            lines.append(_fmt_challenge_line(row))
    else:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
    suggestions = [row for row in available if not row.get("already_active")]
    if suggestions:
        opt = suggestions[0]
        meta = opt.get("meta") or {}
        unit = meta.get("unit") or ""
        target = opt.get("suggested_target") or opt.get("target_value")
        try:
            target_str = str(int(round(float(target))))
        except Exception:
            target_str = str(target)
        unit_text = f" {unit}" if unit else ""
        lines.append("")
        lines.append(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {opt.get('name', opt.get('code'))} ‚Äî —Ü–µ–ª—å {target_str}{unit_text}.")
    await update.message.reply_text("\n".join(lines))

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client_id = await _fetch_client_id(user_id)
    if not client_id:
        await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    active = await _fetch_active_challenges(client_id)
    if not active:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /challenge, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
        return
    parts: list[str] = ["üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π:"]
    for row in active:
        parts.append(_fmt_challenge_details(row))
        parts.append("")
    await update.message.reply_text("\n".join(parts).strip())

async def debug_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        d = update.to_dict(); keys = list(d.keys())
        log.info("DEBUG update keys=%s has_callback=%s has_message=%s", keys, 'callback_query' in d, 'message' in d)
    except Exception:
        pass

async def _fetch_client_id(telegram_user_id: int) -> int | None:
    try:
        async with httpx.AsyncClient(timeout=8.0) as client_http:
            r = await client_http.get(f"{os.getenv('ADMIN_API_BASE', 'http://localhost:8000')}/clients")
            if r.status_code != 200:
                return None
            for row in r.json():
                if row.get("telegram_user_id") == telegram_user_id:
                    return row.get("id")
    except Exception:
        return None
    return None

async def _fetch_active_challenges(client_id: int) -> list[dict]:
    base = os.getenv('ADMIN_API_BASE', 'http://localhost:8000')
    try:
        async with httpx.AsyncClient(timeout=8.0) as client_http:
            r = await client_http.get(f"{base}/clients/{client_id}/challenges/active")
            if r.status_code != 200:
                return []
            return r.json() or []
    except Exception:
        return []

async def _fetch_available_challenges(client_id: int) -> list[dict]:
    base = os.getenv('ADMIN_API_BASE', 'http://localhost:8000')
    try:
        async with httpx.AsyncClient(timeout=8.0) as client_http:
            r = await client_http.get(f"{base}/clients/{client_id}/challenges/available")
            if r.status_code != 200:
                return []
            return r.json() or []
    except Exception:
        return []

async def _fetch_summary(client_id: int, kind: str):
    base = os.getenv('ADMIN_API_BASE', 'http://localhost:8000')
    url = f"{base}/clients/{client_id}/summary/{'daily' if kind=='daily' else 'weekly'}"
    try:
        async with httpx.AsyncClient(timeout=8.0) as client_http:
            r = await client_http.get(url)
            if r.status_code != 200:
                return []
            return r.json() or []
    except Exception:
        return []

def _fmt_macros(kcal, p, f, c):
    def _n(v):
        try:
            if v is None: return 0
            return int(round(float(v)))
        except Exception:
            return 0
    return f"–ö–∞–ª–æ—Ä–∏–∏: {_n(kcal)} –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: {_n(p)} –≥ ¬∑ –ñ–∏—Ä—ã: {_n(f)} –≥ ¬∑ –£–≥–ª–µ–≤–æ–¥—ã: {_n(c)} –≥"

def _fmt_challenge_line(row: dict) -> str:
    progress = row.get("progress") or {}
    meta = progress.get("meta") or row.get("meta") or {}
    unit = meta.get("unit") or ""
    def _num(v):
        try:
            return int(round(float(v)))
        except Exception:
            return 0
    value = _num(progress.get("value"))
    target = _num(progress.get("target_value") or row.get("target_value"))
    unit_text = f" {unit}" if unit else ""
    status = row.get("status") or ("completed" if progress.get("completed") else "active")
    icon = "‚úÖ" if progress.get("completed") or status == "completed" else ("üî•" if status == "active" else "‚è≥")
    name = row.get("name") or row.get("code") or "–ß–µ–ª–ª–µ–Ω–¥–∂"
    return f"{icon} {name}: {value}/{target}{unit_text} ({status})"

def _fmt_challenge_details(row: dict) -> str:
    line = _fmt_challenge_line(row)
    period = f"–ü–µ—Ä–∏–æ–¥: {row.get('start_date')} ‚Äì {row.get('end_date')}"
    baseline = row.get("baseline_value")
    meta = row.get("meta") or {}
    unit = (row.get("progress") or {}).get("meta", {}).get("unit") or meta.get("unit") or ""
    def _num(v):
        try:
            return int(round(float(v)))
        except Exception:
            return 0
    target = _num(row.get("target_value"))
    base = _num(baseline)
    baseline_txt = f"–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {base}{(' ' + unit) if unit else ''}"
    target_txt = f"–¶–µ–ª—å: {target}{(' ' + unit) if unit else ''}"
    return "\n".join([line, baseline_txt, target_txt, period])

async def _build_daily_text(telegram_user_id: int) -> str:
    client_id = await _fetch_client_id(telegram_user_id)
    if not client_id:
        txt = _daily_local_summary_text(telegram_user_id)
        if txt:
            return txt
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞)."
    data = await _fetch_summary(client_id, 'daily')
    if not data:
        txt = _daily_local_summary_text(telegram_user_id)
        if txt:
            return txt
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    today_iso = date.today().isoformat()
    # –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å, –≥–¥–µ period_start == today
    row_today = None
    for r in data:
        if r.get("period_start", "").startswith(today_iso):
            row_today = r; break
    if not row_today:
        # fallback ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è
        row_today = data[-1]
    return "üìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (" + row_today.get("period_start", '')[:10] + ")\n" + _fmt_macros(row_today.get("kcal"), row_today.get("protein_g"), row_today.get("fat_g"), row_today.get("carbs_g"))

async def _build_weekly_text(telegram_user_id: int) -> str:
    client_id = await _fetch_client_id(telegram_user_id)
    if not client_id:
        txt = _weekly_local_summary_text(telegram_user_id)
        if txt:
            return txt
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (–µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞)."
    data = await _fetch_summary(client_id, 'weekly')
    if not data:
        txt = _weekly_local_summary_text(telegram_user_id)
        if txt:
            return txt
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é."

async def _build_daily_details_text(telegram_user_id: int, chat_id: int | None = None) -> str:
    """–ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω–æ–º–µ—Ä, –¥–∞—Ç–∞/–≤—Ä–µ–º—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£, –ø–æ—Ä—Ü–∏—è –∏ –¥–æ–≤–µ—Ä–∏–µ."""
    try:
        now = datetime.now(timezone.utc)
        start = datetime.combine(now.date(), datetime.min.time(), tzinfo=timezone.utc)
        end = start + timedelta(days=1)
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            """
            SELECT created_at, bot_output FROM interactions
            WHERE chat_id=? AND created_at>=? AND created_at<?
            ORDER BY created_at ASC
            """,
            ((chat_id or telegram_user_id), start.isoformat(), end.isoformat()),
        )
        rows = c.fetchall()
        conn.close()
    except Exception:
        rows = []
    try:
        log.info(
            "DAILY_DETAILS: user_id=%s chat_id=%s used_id=%s start=%s end=%s rows=%s",
            telegram_user_id, chat_id, (chat_id or telegram_user_id), start.isoformat(), end.isoformat(), len(rows)
        )
    except Exception:
        pass

    if not rows:
        return "üßæ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ\n–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –±–ª—é–¥."

    def _num(v):
        try:
            return int(round(float(v or 0)))
        except Exception:
            return 0

    lines = []
    for idx, (created_at_iso, text) in enumerate(rows, start=1):
        try:
            parsed = parse_formatted_block(text)
        except Exception:
            continue
        title = parsed.get("title") or "–ë–ª—é–¥–æ"
        portion = _num(parsed.get("portion_g"))
        kcal = _num(parsed.get("kcal"))
        p = _num(parsed.get("protein_g"))
        f = _num(parsed.get("fat_g"))
        carb = _num(parsed.get("carbs_g"))
        # –¥–æ–≤–µ—Ä–∏–µ —É–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–≤–æ–¥–∞
        try:
            dt_local = datetime.fromisoformat(created_at_iso).astimezone()
            dt_s = dt_local.strftime("%H:%M")
        except Exception:
            dt_s = created_at_iso[11:16]
        lines.append(
            f"{idx}. {dt_s} ‚Äî {title} ¬∑ ~{portion} –≥ ¬∑ {kcal} –∫–∫–∞–ª ¬∑ –ë:{p} –≥ –ñ:{f} –≥ –£:{carb} –≥"
        )

    try:
        log.info("DAILY_DETAILS: built lines=%s for used_id=%s", len(lines), (chat_id or telegram_user_id))
    except Exception:
        pass
    return "üßæ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–æ\n" + "\n".join(lines)

def _sum_local_for_period(telegram_user_id: int, start_utc: datetime, end_utc: datetime):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            """
            SELECT bot_output FROM interactions
            WHERE chat_id=? AND created_at>=? AND created_at<?
            """,
            (telegram_user_id, start_utc.isoformat(), end_utc.isoformat()),
        )
        rows = c.fetchall()
        conn.close()
        kcal = p = f = carb = 0.0
        for (text,) in rows:
            try:
                parsed = parse_formatted_block(text)
                kcal += float(parsed.get("kcal") or 0)
                p += float(parsed.get("protein_g") or 0)
                f += float(parsed.get("fat_g") or 0)
                carb += float(parsed.get("carbs_g") or 0)
            except Exception:
                continue
        return kcal, p, f, carb
    except Exception:
        return None

def _daily_local_summary_text(telegram_user_id: int) -> str | None:
    now = datetime.now(timezone.utc)
    start = datetime.combine(now.date(), datetime.min.time(), tzinfo=timezone.utc)
    sums = _sum_local_for_period(telegram_user_id, start, start + timedelta(days=1))
    if not sums:
        return None
    kcal, p, f, carb = sums
    if kcal <= 0 and p <= 0 and f <= 0 and carb <= 0:
        return None
    return "üìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (" + start.date().isoformat() + ")\n" + _fmt_macros(kcal, p, f, carb)

def _weekly_local_summary_text(telegram_user_id: int) -> str | None:
    now = datetime.now(timezone.utc)
    start = datetime.combine(now.date(), datetime.min.time(), tzinfo=timezone.utc) - timedelta(days=6)
    sums = _sum_local_for_period(telegram_user_id, start, start + timedelta(days=7))
    if not sums:
        return None
    kcal, p, f, carb = sums
    if kcal <= 0 and p <= 0 and f <= 0 and carb <= 0:
        return None
    return "üìÜ –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–Ω–∞—á–∞–ª–æ " + start.date().isoformat() + ")\n" + _fmt_macros(kcal, p, f, carb)
    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è –Ω–µ–¥–µ–ª—è)
    row = data[-1]
    return "üìÜ –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–Ω–∞—á–∞–ª–æ " + row.get("period_start", '')[:10] + ")\n" + _fmt_macros(row.get("kcal"), row.get("protein_g"), row.get("fat_g"), row.get("carbs_g"))

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    data = query.data or ""
    log.info("callback received data=%s chat_id=%s", data, query.message.chat_id if query.message else None)
    try:
        await query.answer("–û–±–Ω–æ–≤–ª—è—é‚Ä¶", show_alert=False)
    except Exception:
        pass
    try:
        if data == MENU_CB_HELP:
            text = INSTRUCTION_TEXT
        elif data == MENU_CB_ABOUT:
            text = ABOUT_TEXT
        elif data == MENU_CB_DAILY:
            text = await _build_daily_text(query.from_user.id)
        elif data == MENU_CB_WEEKLY:
            text = await _build_weekly_text(query.from_user.id)
        elif data == MENU_CB_DAILY_DETAILS:
            text = await _build_daily_details_text(query.from_user.id, chat_id=(query.message.chat_id if query.message else None))
        else:
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é."
    except Exception as e:
        log.exception("error building callback response", exc_info=e)
        text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    try:
        await query.edit_message_text(text, reply_markup=menu_keyboard())
    except Exception as e:
        log.warning("edit_message_text failed: %s", e)
        try:
            await query.message.reply_text(text, reply_markup=menu_keyboard())
        except Exception:
            pass

# ------------- ERROR HANDLER -------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Unhandled exception", exc_info=context.error)

# ------------- MAIN -------------
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("finalize", finalize_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("today", today_command))
    app.add_handler(CommandHandler("week", week_command))
    app.add_handler(CommandHandler("challenge", challenge_command))
    app.add_handler(CommandHandler("progress", progress_command))
    app.add_handler(MessageHandler(filters.ALL, debug_all, block=False), group=100)
    app.add_handler(CallbackQueryHandler(menu_callback))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_correction))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    log.info("Bot started.")
    from telegram import Update as TgUpdate
    app.run_polling(allowed_updates=TgUpdate.ALL_TYPES, close_loop=False, drop_pending_updates=False)

if __name__ == "__main__":
    main()
