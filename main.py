# bot/main.py
# Simple Telegram food recognition bot with formatted RU output + Admin API ingestion
# Requirements:
#   python-telegram-bot==21.9
#   openai>=1.40.0
#   python-dotenv>=1.0.1
#
# .env (root or bot/):
#   TELEGRAM_BOT_TOKEN=...
#   OPENAI_API_KEY=...
#   OPENAI_VISION_MODEL=gpt-4o-mini
#   OPENAI_TEXT_MODEL=gpt-4o-mini
#   ADMIN_API_BASE=http://localhost:8000
#   ADMIN_API_KEY=supersecret

import os, json, base64, sqlite3, logging
from datetime import datetime, timezone
from typing import Optional

from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

# --- Local modules for Admin integration ---
from bot.parse_block import parse_formatted_block          # bot/parse_block.py
from bot.ingest_client import ingest_meal                  # bot/ingest_client.py

# ------------- ENV / CONFIG -------------
# Try loading from repo root and bot/ folder
if os.path.exists(os.path.join(os.path.dirname(__file__), "..", ".env")):
    load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env"))
else:
    load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
MODEL_VISION = os.getenv("OPENAI_VISION_MODEL", "gpt-4o-mini")
MODEL_TEXT   = os.getenv("OPENAI_TEXT_MODEL",   "gpt-4o-mini")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise SystemExit("Set TELEGRAM_BOT_TOKEN and OPENAI_API_KEY in .env")

# ------------- LOGGING -------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("foodbot")

# ------------- OPENAI -------------
client = OpenAI(api_key=OPENAI_KEY)

# ------------- DB (SQLite) -------------
DB_PATH = os.path.join(os.path.dirname(__file__), "state_simple.db")

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS interactions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER, original_message_id INTEGER, bot_message_id INTEGER,
        mode TEXT,                     -- 'image' or 'text'
        original_hint TEXT,            -- caption or text
        bot_output TEXT,               -- last rendered formatted text
        created_at TEXT, updated_at TEXT
    )""")
    conn.commit(); conn.close()

def save_interaction(chat_id, original_message_id, bot_message_id, mode, hint, bot_output):
    ts = datetime.now(timezone.utc).isoformat()
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""INSERT INTO interactions(chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output, created_at, updated_at)
                 VALUES(?,?,?,?,?,?,?,?)""",
              (chat_id, original_message_id, bot_message_id, mode, hint, bot_output, ts, ts))
    conn.commit(); conn.close()

def update_interaction_bot_output(bot_message_id, new_text):
    ts = datetime.now(timezone.utc).isoformat()
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""UPDATE interactions SET bot_output=?, updated_at=? WHERE bot_message_id=?""",
              (new_text, ts, bot_message_id))
    conn.commit(); conn.close()

def get_interaction_by_bot_message_id(bot_message_id):
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""SELECT id, chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output
                 FROM interactions WHERE bot_message_id=?""", (bot_message_id,))
    row = c.fetchone(); conn.close(); return row

def get_last_interaction_by_chat(chat_id):
    conn = sqlite3.connect(DB_PATH); c = conn.cursor()
    c.execute("""SELECT id, chat_id, original_message_id, bot_message_id, mode, original_hint, bot_output
                 FROM interactions WHERE chat_id=? ORDER BY id DESC LIMIT 1""", (chat_id,))
    row = c.fetchone(); conn.close(); return row

# ------------- PROMPTS -------------
FORMAT_INSTRUCTIONS_RU = """
–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º —á–∏—Ç–∞–µ–º—ã–º –±–ª–æ–∫–æ–º (–±–µ–∑ –∫–æ–¥–∞, –±–µ–∑ JSON):

üçΩÔ∏è –†–∞–∑–±–æ—Ä –±–ª—é–¥–∞ (–æ—Ü–µ–Ω–∫–∞ –ø–æ {SOURCE})
{TITLE}.
–ü–æ—Ä—Ü–∏—è: ~ {PORTION} –≥  ¬∑  –¥–æ–≤–µ—Ä–∏–µ {CONF}%
–ö–∞–ª–æ—Ä–∏–∏: {KCAL} –∫–∫–∞–ª
–ë–ñ–£: –±–µ–ª–∫–∏ {P} –≥ ¬∑ –∂–∏—Ä—ã {F} –≥ ¬∑ —É–≥–ª–µ–≤–æ–¥—ã {C} –≥
–ö–ª—é—á–µ–≤—ã–µ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–æ–ø-5):
‚Ä¢ {MICRO1}
‚Ä¢ {MICRO2}
–§–ª–∞–≥–∏ –¥–∏–µ—Ç—ã:
‚Ä¢ vegetarian: {VEGETARIAN}  ¬∑  vegan: {VEGAN}
‚Ä¢ glutenfree: {GLUTENFREE}  ¬∑  lactosefree: {LACTOSEFREE}
–î–æ–ø—É—â–µ–Ω–∏—è:
‚Ä¢ {ASSUMP1}
‚Ä¢ {ASSUMP2}

–ü—Ä–∞–≤–∏–ª–∞:
- –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω—ã–π –º–∞–∫–µ—Ç –∏ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫.
- –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–∞–ª–æ—Ä–∏–∏: 360 –∫–∫–∞–ª¬ª).
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ {TITLE} ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ñ–∞—Ä–µ–Ω—ã–π –ª–æ—Å–æ—Å—å —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ —Å–∞–ª–∞—Ç–æ–º¬ª).
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –≤–Ω–µ –±–ª–æ–∫–∞.
"""

SYSTEM_SIMPLE = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ü–†–û–°–¢–û —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –µ–¥—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –≤—ã–¥–∞—ë—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n"
    "–ù–µ –≤–¥–∞–≤–∞–π—Å—è –≤ —Å–ª–æ–∂–Ω—ã–µ –Ω—É—Ç—Ä–∏-—Ä–∞—Å—á—ë—Ç—ã: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.\n"
    "–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∏–∫–∞–∫–∏—Ö JSON –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
)

REVISE_RULES = (
    "–ù–∏–∂–µ —Ç–≤–æ–π –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ/–ø–æ–ø—Ä–∞–≤–∫—É.\n"
    "–ü–µ—Ä–µ–ø–∏—à–∏ –±–ª–æ–∫, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–≤ –¢–û–õ–¨–ö–û –æ—à–∏–±–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–∞–≤, –ø–æ—Ä—Ü–∏—é, —Ñ–ª–∞–≥–∏, –ë–ñ–£), –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤—å –∫–∞–∫ –±—ã–ª–æ.\n"
    "–§–æ—Ä–º–∞—Ç –∏ –º–∞–∫–µ—Ç –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º–∏ –∂–µ. –í –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π."
)

# ------------- UTILS -------------
def encode_image_to_data_url(path: str) -> str:
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    return f"data:image/jpeg;base64,{b64}"

async def llm_render_from_image(image_data_url: str, hint_text: str = "") -> str:
    user_parts = [
        {"type": "text", "text": SYSTEM_SIMPLE + "\n\n" + FORMAT_INSTRUCTIONS_RU.replace("{SOURCE}", "—Ñ–æ—Ç–æ")}
    ]
    user_parts.append({"type": "image_url", "image_url": {"url": image_data_url}})
    if hint_text:
        user_parts.append({"type": "text", "text": f"–ü–æ–¥–ø–∏—Å—å/–ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hint_text}"})
    resp = client.chat.completions.create(
        model=MODEL_VISION,
        messages=[{"role":"user","content": user_parts}],
        temperature=0.2
    )
    return resp.choices[0].message.content.strip()

async def llm_render_from_text(text: str) -> str:
    prompt = SYSTEM_SIMPLE + "\n\n" + FORMAT_INSTRUCTIONS_RU.replace("{SOURCE}", "–æ–ø–∏—Å–∞–Ω–∏—é") + "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + text
    resp = client.chat_completions.create(  # fallback for SDK variations
        model=MODEL_TEXT,
        messages=[{"role":"user","content": prompt}],
        temperature=0.2
    ) if hasattr(client, "chat_completions") else client.chat.completions.create(
        model=MODEL_TEXT,
        messages=[{"role":"user","content": prompt}],
        temperature=0.2
    )
    # normalize SDK difference
    content = (resp.choices[0].message.content if hasattr(resp.choices[0], "message") else resp.choices[0].content).strip()
    return content

async def llm_revise(previous_block: str, correction_text: str) -> str:
    resp = client.chat.completions.create(
        model=MODEL_TEXT,
        messages=[
            {"role":"system","content": REVISE_RULES},
            {"role":"user","content": "–¢–≤–æ–π –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç:\n" + previous_block},
            {"role":"user","content": "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + correction_text}
        ],
        temperature=0.2
    )
    return resp.choices[0].message.content.strip()

def _send_ingest_from_block(
    block_text: str,
    update: Update,
    message_id: int,
    source_type: str,
    image_path: Optional[str] = None
) -> None:
    """Parse bot block and send to Admin API (upsert by message_id)."""
    try:
        parsed = parse_formatted_block(block_text)
        ingest_meal({
            "telegram_user_id": update.message.from_user.id,
            "telegram_username": update.message.from_user.username,
            "captured_at_iso": datetime.now(timezone.utc).isoformat(),
            "title": parsed["title"],
            "portion_g": parsed["portion_g"],
            "confidence": parsed["confidence"],
            "kcal": parsed["kcal"],
            "protein_g": parsed.get("protein_g"),
            "fat_g": parsed.get("fat_g"),
            "carbs_g": parsed.get("carbs_g"),
            "flags": parsed.get("flags", {}),
            "micronutrients": parsed.get("micronutrients", []),
            "assumptions": parsed.get("assumptions", []),
            "source_type": source_type,
            "image_path": image_path,
            "message_id": message_id
        })
    except Exception as e:
        log.exception("Failed to ingest meal", exc_info=e)

# ------------- HANDLERS -------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—à–∏ –±–ª—é–¥–æ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –≤–µ—Ä–Ω—É –æ—Ç—á—ë—Ç.\n"
        "–£—Ç–æ—á–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ä–µ–ø–ª–∞–µ–º –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (¬´–µ—Å—Ç—å ‚Ä¶¬ª, ¬´–¥–æ–±–∞–≤—å ‚Ä¶¬ª, ¬´–±–µ–∑ ‚Ä¶¬ª)."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.photo:
        return
    photo = update.message.photo[-1]
    f = await photo.get_file()
    downloads_dir = os.path.join(os.path.dirname(__file__), "downloads")
    os.makedirs(downloads_dir, exist_ok=True)
    local_path = os.path.join(downloads_dir, f"{f.file_unique_id}.jpg")
    await f.download_to_drive(local_path)
    caption = (update.message.caption or "").strip()

    try:
        block = await llm_render_from_image(encode_image_to_data_url(local_path), caption)
    except Exception as e:
        log.exception("LLM image render failed", exc_info=e)
        block = (
            "üçΩÔ∏è –†–∞–∑–±–æ—Ä –±–ª—é–¥–∞ (–æ—Ü–µ–Ω–∫–∞ –ø–æ —Ñ–æ—Ç–æ)\n–ë–ª—é–¥–æ (–∞—Å—Å–æ—Ä—Ç–∏).\n–ü–æ—Ä—Ü–∏—è: ~ 300 –≥  ¬∑  –¥–æ–≤–µ—Ä–∏–µ 60%\n"
            "–ö–∞–ª–æ—Ä–∏–∏: 360 –∫–∫–∞–ª\n–ë–ñ–£: –±–µ–ª–∫–∏ 15 –≥ ¬∑ –∂–∏—Ä—ã 15 –≥ ¬∑ —É–≥–ª–µ–≤–æ–¥—ã 45 –≥\n"
            "–ö–ª—é—á–µ–≤—ã–µ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–æ–ø-5):\n‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞ ‚Äî 6 g\n‚Ä¢ –í–∏—Ç–∞–º–∏–Ω C ‚Äî 30 mg\n"
            "–§–ª–∞–≥–∏ –¥–∏–µ—Ç—ã:\n‚Ä¢ vegetarian: –Ω–µ—Ç  ¬∑  vegan: –Ω–µ—Ç\n‚Ä¢ glutenfree: –Ω–µ—Ç  ¬∑  lactosefree: –Ω–µ—Ç\n"
            "–î–æ–ø—É—â–µ–Ω–∏—è:\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø–æ —Ñ–æ—Ç–æ.\n‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –º–∞—Å—Å–∞ ‚Äî –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ."
        )

    sent = await update.message.reply_text(block)

    # --- Admin ingestion ---
    _send_ingest_from_block(
        block_text=block,
        update=update,
        message_id=sent.message_id,
        source_type="image",
        image_path=local_path
    )

    # --- Local persistence for correction flow ---
    save_interaction(update.effective_chat.id, update.message.message_id, sent.message_id, "image", caption, block)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    # Not a reply but likely a correction ‚Üí apply to last bot message
    if not (update.message.reply_to_message and update.message.reply_to_message.from_user and update.message.reply_to_message.from_user.is_bot):
        markers = ("–µ—Å—Ç—å ", "–¥–æ–±–∞–≤—å", "—É–±–µ—Ä–∏", "–±–µ–∑ ", "+", "–µ—â—ë ", "–µ—â–µ ", "–ø–æ–º–µ–Ω—è–π", "–∑–∞–º–µ–Ω–∏")
        lc = text.lower()
        if any(lc.startswith(m) or m in lc for m in markers):
            last = get_last_interaction_by_chat(update.effective_chat.id)
            if last:
                _, chat_id, orig_id, bot_msg_id, mode, hint, prev_block = last
                try:
                    new_block = await llm_revise(prev_block, text)
                except Exception as e:
                    log.exception("LLM revise failed", exc_info=e)
                    new_block = prev_block  # fallback: keep as is

                try:
                    await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=bot_msg_id, text=new_block)
                except Exception:
                    await update.message.reply_text(new_block)

                update_interaction_bot_output(bot_msg_id, new_block)

                # Admin ingestion (update same message_id)
                dummy_update = update  # for user id/username
                _send_ingest_from_block(
                    block_text=new_block,
                    update=dummy_update,
                    message_id=bot_msg_id,
                    source_type=mode or "text",
                    image_path=None
                )
                return

    # Fresh text identification
    try:
        block = await llm_render_from_text(text)
    except Exception as e:
        log.exception("LLM text render failed", exc_info=e)
        block = (
            "üçΩÔ∏è –†–∞–∑–±–æ—Ä –±–ª—é–¥–∞ (–æ—Ü–µ–Ω–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é)\n–ë–ª—é–¥–æ (–∞—Å—Å–æ—Ä—Ç–∏).\n–ü–æ—Ä—Ü–∏—è: ~ 300 –≥  ¬∑  –¥–æ–≤–µ—Ä–∏–µ 60%\n"
            "–ö–∞–ª–æ—Ä–∏–∏: 360 –∫–∫–∞–ª\n–ë–ñ–£: –±–µ–ª–∫–∏ 15 –≥ ¬∑ –∂–∏—Ä—ã 15 –≥ ¬∑ —É–≥–ª–µ–≤–æ–¥—ã 45 –≥\n"
            "–ö–ª—é—á–µ–≤—ã–µ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–æ–ø-5):\n‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞ ‚Äî 6 g\n‚Ä¢ –í–∏—Ç–∞–º–∏–Ω C ‚Äî 30 mg\n"
            "–§–ª–∞–≥–∏ –¥–∏–µ—Ç—ã:\n‚Ä¢ vegetarian: –Ω–µ—Ç  ¬∑  vegan: –Ω–µ—Ç\n‚Ä¢ glutenfree: –Ω–µ—Ç  ¬∑  lactosefree: –Ω–µ—Ç\n"
            "–î–æ–ø—É—â–µ–Ω–∏—è:\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –º–∞—Å—Å–∞ ‚Äî –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ."
        )
    sent = await update.message.reply_text(block)

    # Admin ingestion
    _send_ingest_from_block(
        block_text=block,
        update=update,
        message_id=sent.message_id,
        source_type="text",
        image_path=None
    )

    save_interaction(update.effective_chat.id, update.message.message_id, sent.message_id, "text", text, block)

async def handle_correction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reply-to-bot ‚Üí correction
    msg = update.message
    if not msg or not msg.text or not msg.reply_to_message:
        return
    if not (msg.reply_to_message.from_user and msg.reply_to_message.from_user.is_bot and msg.reply_to_message.from_user.id == context.bot.id):
        return

    row = get_interaction_by_bot_message_id(msg.reply_to_message.message_id)
    if not row: return
    _, chat_id, orig_id, bot_msg_id, mode, hint, prev_block = row

    try:
        new_block = await llm_revise(prev_block, msg.text.strip())
    except Exception as e:
        log.exception("LLM revise failed", exc_info=e)
        new_block = prev_block

    try:
        await msg.reply_to_message.edit_text(new_block)
    except Exception:
        await msg.reply_text(new_block)

    update_interaction_bot_output(bot_msg_id, new_block)

    # Admin ingestion (update same message_id)
    _send_ingest_from_block(
        block_text=new_block,
        update=update,
        message_id=bot_msg_id,
        source_type=mode or "text",
        image_path=None
    )

async def finalize_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏. –ö–æ–º–∞–Ω–¥–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è üòä")

# ------------- ERROR HANDLER -------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Unhandled exception", exc_info=context.error)

# ------------- MAIN -------------
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("finalize", finalize_command))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_correction))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    log.info("Bot started.")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
