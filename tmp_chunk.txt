[def _weekly_local_summary_text(telegram_user_id: int) -> str | None:]
[    now = datetime.now(timezone.utc)]
[    start = datetime.combine(now.date(), datetime.min.time(), tzinfo=timezone.utc) - timedelta(days=6)]
[    sums = _sum_local_for_period(telegram_user_id, start, start + timedelta(days=7))]
[    if not sums:]
[        return None]
[    kcal, p, f, carb = sums]
[    if kcal <= 0 and p <= 0 and f <= 0 and carb <= 0:]
[        return None]
[    return "📆 Сводка за неделю (начало " + start.date().isoformat() + ")\n" + _fmt_macros(kcal, p, f, carb)]
[    row = data[-1]]
[    return "📆 Сводка за неделю (начало " + row.get("period_start", '')[:10] + ")\n" + _fmt_macros(row.get("kcal"), row.get("protein_g"), row.get("fat_g"), row.get("carbs_g"))]
[]
[async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):]
[    query = update.callback_query]
[    if not query:]
[        return]
[    data = query.data or ""]
[    log.info("callback received data=%s chat_id=%s", data, query.message.chat_id if query.message else None)]
[    try:]
[        await query.answer("Обновляю…", show_alert=False)]
[    except Exception:]
[        pass]
[    try:]
[        if data == MENU_CB_HELP:]
[            text = INSTRUCTION_TEXT]
[        elif data == MENU_CB_ABOUT:]
[            text = ABOUT_TEXT]
[        elif data == MENU_CB_DAILY:]
[            text = await _build_daily_text(query.from_user.id)]
[        elif data == MENU_CB_WEEKLY:]
[            text = await _build_weekly_text(query.from_user.id)]
[        else:]
[            text = "Неизвестный пункт меню."]
[    except Exception as e:]
[        log.exception("error building callback response", exc_info=e)]
[        text = "Ошибка при получении данных. Попробуйте позже."]
[    try:]
[        await query.edit_message_text(text, reply_markup=menu_keyboard())]
[    except Exception as e:]
[        log.warning("edit_message_text failed: %s", e)]
